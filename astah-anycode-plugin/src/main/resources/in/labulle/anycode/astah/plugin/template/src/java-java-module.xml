<?xml version="1.0" encoding="UTF-8"?>
<directive id="java" name="java">
	<description> This directive provides macros and functions to generate code in java language.
	</description>
	<macro name="attribute">
		<description>Renders and attribute (either simple or part of a relation). If attribute has no name, nothing is rendered.
		</description>
		<param>
			<name>att</name>
			<description>The attribute to render</description>
		</param>
		<code>
<![CDATA[<#macro attribute att>
    <#local attName = getAttributeName(att)/>
	<#if attName?has_content>
	private <@datatype att/> ${attName};
	</#if>
</#macro>]]>
		</code>
	</macro>
	<macro name="getter">
		<description>Renders attribute's getter. If attribute has no name, nothing is rendered.</description>
		<param>
			<name>att</name>
			<description>The attribute to render</description>
		</param>
		<code>
<![CDATA[<#macro getter att>
	<#local attName = getAttributeName(att)/>
	<#if attName?has_content>
	/**
     * ${attName}'s getter.
     */
	public final <@datatype att/> get${attName?cap_first}() {
		return this.${attName};
	}
	</#if>
</#macro>]]>
		</code>
	</macro>
	<macro name="setter">
		<description>Renders attribute's setter. If attribute has no name, nothing is rendered.</description>
		<param>
			<name>att</name>
			<description>The attribute to render</description>
		</param>
		<code>
<![CDATA[<#macro setter att>
    <#local attName = getAttributeName(att)/>
	<#if attName?has_content>
	/**
     * ${attName}'s setter.
     */
	public void set${attName?cap_first}(final <@datatype att/> a${attName?cap_first}) {
		this.${attName} = a${attName?cap_first};
	}
	</#if>
</#macro>]]>
		</code>
	</macro>
	<macro name="datatype">
		<description>Renders attribute's datatype in java language.</description>
		<param>
			<name>att</name>
			<description>The attribute to render</description>
		</param>
		<code>
<![CDATA[<#macro datatype att>
	<@compress>
	<#if util.isManyToOne(att) || util.isSimple(att)>
${att.qualifiedTypeExpression?replace("::",".")}
	</#if>
	<#if util.isOneToMany(att) || util.isManyToMany(att)>
java.util.Set<${att.qualifiedTypeExpression?replace("::",".")}>
	</#if>
	</@compress>
</#macro>]]>
		</code>
	</macro>
	
<function name="getAttributeName">
		<description>Gets or generates attribute's name</description>
		<param>
			<name>att</name>
			<description>The attribute</description>
		</param>
		<return>attribute's name or typeExpression name if it's part of an association</return>
		<code>
<![CDATA[<#function getAttributeName att>
	<#if att.name?has_content>
		<#return att.name />
	<#else>
		<#return att.typeExpression?uncap_first />		
	</#if>
</#function>]]>
		</code>
		<snippet>
<![CDATA[]]></snippet>
	</function>	

	<macro name="custom_code">
		<description>Adds a merge point to your generated java code. Further generations will merge code inside this tag</description>
		<param>
			<name>id</name>
			<description>Unique identifier for this merge point</description>
		</param>
		<code>
<![CDATA[<#macro custom_code id><@util.custom_code id=id bComment='//'/></#macro>]]>
		</code>
	</macro>
	
	<macro name="operation">
		<description>Renders a java operation</description>
		<param>
			<name>op</name>
			<description>Operation</description>
		</param>
		<param>
			<name>includeExceptions</name>
			<description>If true, renders an exception. false by default</description>
		</param>
		<param>
			<name>includeBody</name>
			<description>If true, renders brackets and custom code body. If false, renders signature only. false by default</description>
		</param>
		<param>
			<name>alternativeOpName</name>
			<description>Override method name with anotherone.</description>
		</param>
		<code>
<![CDATA[<#macro operation op alternativeOpName='' includeExceptions=false includeBody=false>
	<#if op.name?has_content>	
		<#local idValue="${op.name}"/>
		<#list op.parameters as p>
			<#local idValue=idValue+"-"+p.name/>
		</#list>
		<@compress>
		<@custom_code id="op-"+idValue />
		</@compress>
	<#if includeBody><@visibility op/></#if> ${op.returnType.name}${op.typeModifier} <#if  (alternativeOpName?length > 0)>${alternativeOpName}<#else>${op.name}</#if>(<#list op.parameters as p>${p.type.name} ${p.name} <#if p_has_next>,</#if></#list>) <#if includeExceptions>throws ${op.owner.name}Exception</#if><#if !includeBody>;<#else>{
		<@compress>
		<@custom_code id="op-content-"+idValue />
		</@compress>
	}</#if> 
	</#if>
</#macro>]]>
		</code>
	</macro>
	
	<macro name="visibility">
		<description>Renders a java visibility</description>
		<param>
			<name>elt</name>
			<description>uml element</description>
		</param>
		<code>
<![CDATA[<#macro visibility elt>
	<@compress>
	<#if elt.privateVisibility>private
	<#elseif elt.publicVisibility>public
	<#elseif elt.protectedVisibility>protected
	</#if>
	</@compress>
</#macro>]]>
		</code>
	</macro>

	
</directive>