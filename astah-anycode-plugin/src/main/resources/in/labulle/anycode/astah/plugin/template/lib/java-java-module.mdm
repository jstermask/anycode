
	
<#--Renders and attribute (either simple or part of a relation). If attribute has no name, nothing is rendered.
		-->

<#macro attribute att>
    <#local attName = getAttributeName(att)/>
	<#if attName?has_content>
	private <@datatype att/> ${attName};
	</#if>
</#macro>
		
	
<#--Adds a merge point to your generated java code. Further generations will merge code inside this tag-->

<#macro custom_code id><@util.custom_code id=id bComment='//'/></#macro>
		
	
<#--Renders attribute's datatype in java language.-->

<#macro datatype att>
	<@compress>
	<#if util.isManyToOne(att) || util.isSimple(att)>
${att.qualifiedTypeExpression?replace("::",".")}
	</#if>
	<#if util.isOneToMany(att) || util.isManyToMany(att)>
java.util.Set<${att.qualifiedTypeExpression?replace("::",".")}>
	</#if>
	</@compress>
</#macro>
		
	
<#--Gets or generates attribute's name-->

<#function getAttributeName att>
	<#if att.name?has_content>
		<#return att.name />
	<#else>
		<#return att.typeExpression?uncap_first />		
	</#if>
</#function>
		
	
<#--Renders attribute's getter. If attribute has no name, nothing is rendered.-->

<#macro getter att>
	<#local attName = getAttributeName(att)/>
	<#if attName?has_content>
	/**
     * ${attName}'s getter.
     */
	public final <@datatype att/> get${attName?cap_first}() {
		return this.${attName};
	}
	</#if>
</#macro>
		
	
<#--Renders attribute's setter. If attribute has no name, nothing is rendered.-->

<#macro setter att>
    <#local attName = getAttributeName(att)/>
	<#if attName?has_content>
	/**
     * ${attName}'s setter.
     */
	public void set${attName?cap_first}(final <@datatype att/> a${attName?cap_first}) {
		this.${attName} = a${attName?cap_first};
	}
	</#if>
</#macro>

<#macro operation op includeExceptions=false includeBody=false >
	<#if op.name?has_content>
	<#if includeBody><@visibility op/></#if> ${op.returnType.name} ${op.name}(<#list op.parameters as p>${p.type.name} ${p.name} <#if p_has_next>,</#if></#list>) <#if includeExceptions>throws ${op.owner.name}Exception</#if><#if !includeBody>;<#else>{
		<@compress>
		<#local idValue="op-${op.name}"/>
		<#list op.parameters as p>
			<#local idValue=idValue+p.name/>
			<#if p_has_next>
				<#local idValue=idValue+'-'/>
			</#if>
		</#list>
		<@custom_code id="op-${op.name}-" />
		</@compress>
	
	}</#if> 
	</#if>
</#macro>

<#macro visibility elt>
	<@compress>
	<#if elt.privateVisibility>private
	<#elseif elt.publicVisibility>public
	<#elseif elt.protectedVisibility>protected
	</#if>
	</@compress>
</#macro>
		