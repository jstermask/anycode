
	
<#--Generates JPA attribute-->

<#macro attribute att>
    <@compress>
	<@attribute_annotations att/>
	<@java.attribute att/>
	</@compress>
	
</#macro>
		
	
<#--Generates JPA annotations on each attributes.-->

<#macro attribute_annotations att>
<#if att.constraints?has_content>
<#list att.constraints as a>
${a.name}
</#list>
<#elseif util.isSimple(att) && !isIdAttribute(att)>

<#elseif util.isOneToOne(att)>
@javax.persistence.OneToOne<#if util.isMandatoryAssociation(att)>(optional=false)</#if>
<#elseif util.isManyToMany(att)>
@javax.persistence.ManyToMany
<#elseif util.isManyToOne(att)>
@javax.persistence.ManyToOne<#if util.isMandatoryAssociation(att)>(optional=false)</#if>
<#elseif util.isOneToMany(att)>
@javax.persistence.OneToMany
</#if>
</#macro>
		
	
<#--Generates a composite primary key (non composite), based on the given class-->

<#macro composite_primary_key c>
		@javax.persistence.EmbeddedId
		private ${c.name}PK id;
		
		public ${c.name}PK getId() {
			return this.id;
		}
		
		public void setId(final ${c.name}PK anId) {
			this.id = anId;
		}
</#macro>
		
	
<#--Generates a primary key named ID.-->

<#macro default_primary_key c>
		@javax.persistence.Id
		@javax.persistence.GeneratedValue(strategy=javax.persistence.GenerationType.SEQUENCE,generator="SQ_${c.name?upper_case}")
		private Integer id;
		
		public Integer getId() {
			return this.id;
		}
		
		public void setId(final Integer anId) {
			this.id = anId;
		}
</#macro>
		
	
<#--If entity has no identifier column defined, then a sequence generator will be generated. Otherwise, nothing will be generated-->

<#macro entity_annotations c>
@javax.persistence.Entity
<#if (getIdAttributes(c)?size == 0)>
<@entity_sequence c/>
</#if>
</#macro>
		
	
<#--Generates sequence generator as SQ_{className}.-->

<#macro entity_sequence c>
@javax.persistence.SequenceGenerator(name="SQ_${c.name?upper_case}", sequenceName="SQ_${c.name?upper_case}", initialValue=1, allocationSize=1)
</#macro>
		
	
<#--Gets the list of identifier attributes of the entity based on  <<id>> stereotype -->

<#function getIdAttributes c>
	<#local listIds = []/>
	<#list util.getAttributes(c, false) as att>
	<#if isIdAttribute(att)>
		<#local listIds = listIds + [att]/>
	</#if>
	</#list>
	<#return listIds/>
</#function>
		
	
<#--Gets the list of attributes of the entity that are not "identifiers" (no "id" stereotype) -->

<#function getNonIdAttributes c>
	<#local listIds = []/>
	<#list util.getAttributes(c, true) as att>
	<#if (!isIdAttribute(att))>
		<#local listIds = listIds + [att]/>
	</#if>
	</#list>
	<#return listIds/>
</#function>
		
	
<#--Checks is class has a composite key -->

<#function hasCompositeKey c>
	<#return (getIdAttributes(c)?size > 1) />
</#function>
		
	
<#--Renders JPA import dependencies (import javax.persistence.*...).-->

<#macro imports>
import javax.persistence.*;
import java.util.*;
import org.hibernate.annotations.*;
</#macro>
		
	
<#--Checks if attribute is has "id" stereotype-->

<#function isIdAttribute att>
	<#return (att.hasStereotype("id") || util.isCompositeRelation(att)) />
</#function>
		
	
<#--Generates a primary key. If "id" attributes are present, then classes are generated automatically. Otherwise a default primary key is generated.-->

<#macro primary_key c>
<#local atts = getIdAttributes(c) />	
<#if (atts?size == 1)>
	<@simple_primary_key atts[0]/>
<#elseif (atts?size > 1)>
	<@composite_primary_key c/>
<#else>
	<@default_primary_key c/>
</#if>
</#macro>
		
	
<#--Generates a primary key based on the unique id attribute of the class.-->

<#macro simple_primary_key att>
	@javax.persistence.Id
	<#if att.association??>@javax.persistence.ManyToOne</#if>
	<@java.attribute att />
	<@java.getter att />
	<@java.setter att />
	
</#macro>
		