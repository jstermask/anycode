<?xml version="1.0" encoding="UTF-8"?>
<directive id="util" name="utility">
	<description> This directive provides commons functions to make queries on UML model easier.
	</description>
	<function name="isSimple">
		<description>Checks whether the given attribute is a simple class attribute and not part of a relation.</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true if attribute does not belong to an association</return>
		<code>
<![CDATA[<#function isSimple att>
	<#return !att.association?has_content />
</#function>]]>
		</code>
	</function>
	<function name="isManyToOne">
		<description>Checks whether the given attribute is the "one" end in a many-to-one relationship.</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true if attribute is the one end in a many-to-one relationship.</return>
		<code>
<![CDATA[<#function isManyToOne att>
	<#return !isSimple(att) && !isManyToMany(att) && att.multiplicity?has_content && att.multiplicity[0].upper == 1 />
</#function>]]>
		</code>
		<snippet>
<![CDATA[<#-- This can be useful to generate specific annotations (below an example with JPA) -->
<#if util.isManyToOne(att)>
	@ManyToOne
	...
</#if>]]></snippet>
	</function>
	<function name="isOneToMany">
		<description>Checks whether the given attribute is the "many" end in a oneToMany relationship.</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true if attribute is part of oneTomany relationship</return>
		<code>
<![CDATA[<#function isOneToMany att>
	<#return !isSimple(att) && !isManyToMany(att) && att.multiplicity?has_content && att.multiplicity[0].upper == -1/>
</#function>]]>
		</code>
	</function>
	<function name="isManyToMany">
		<description>Checks whether the given attribute is part of a manyToMany relationship.</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true if attribute is part of manyToMany relationship</return>
		<code>
<![CDATA[<#function isManyToMany att>
	<#if !isSimple(att)>
		<#local many = true />
		<#list att.association.memberEnds as att1>
			<#if !(att1.multiplicity?has_content && att1.multiplicity[0].upper == -1 && (att1.multiplicity[0].lower == 0 || att1.multiplicity[0].lower == 1))>
				<#local many = false />
			</#if>
		</#list>
		<#return many />
	<#else>
		<#return false/>
	</#if>
</#function>]]>
		</code>
	</function>
	<function name="isOneToOne">
		<description>Checks whether the given attribute is part of a manyToMany relationship.</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true if attribute is part of oneToOne relationship</return>
		<code>
<![CDATA[<#function isOneToOne att>
	<#if !isSimple(att)>
		<#local one = true />
		<#list att.association.memberEnds as att1>
			<#if !(att1.multiplicity?has_content && att1.multiplicity[0].upper == 1 && att1.multiplicity[0].lower == 1)>
				<#local one = false />
			</#if>
		</#list>
		<#return one />
	<#else>
		<#return false/>
	</#if>
</#function>]]>
		</code>
	</function>
	<function name="isMandatoryAssociation">
		<description>Checks whether the given attribute is mandatory, i.e : whether the given attribute is part of a 1-1 or *-1 and not
			1-[0..1] nor *-[0..1]
		</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true if attribute in the relation is mandatory</return>
		<code>
<![CDATA[<#function isMandatoryAssociation att>
	<#return ((isManyToOne(att) || isOneToOne(att)) && att.multiplicity[0].lower == 1) />
</#function>]]></code>
	</function>
	
	<function name="isCompositeRelation">
		<description>Attribute that is not "simple" and that is a composite end of a relation is a composite relation
		</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true attribute is part of a composite relation</return>
		<code>
<![CDATA[<#function isCompositeRelation att>
	<#return (!isSimple(att) && att.composite)/>
</#function>]]></code>
	</function>	
	
	
	<macro name="custom_code">
		<description>Adds a merge point to your generated code. Further generations will merge code inside this tag</description>
		<param>
			<name>id</name>
			<description>Unique identifier for this merge point</description>
		</param>
		<code>
<![CDATA[<#macro custom_code id params...>
	<@compress>
	${params['bComment']}<customCode id="${id}">
	<#if .data_model['customCodes'][id]?? >
		${.data_model['customCodes'][id]}
	</#if>
	<#if params['eComment']??>${params['eComment']}<#else>${params['bComment']}</#if></customCode>
	</@compress>
	
</#macro>]]>
		</code>
	</macro>

	<function name="isNavigable">
		<description>Return true if attribute is navigable or if it has no specified navigation
		</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<return>true if attribute if navigable</return>
		<code>
<![CDATA[<#function isNavigable att>
	<#return att.navigability == 'Navigable'/>
</#function>]]></code>
	</function>	
	
	<function name="getAttributes">
		<description>Return class attributes
		</description>
		<param>
			<name>att</name>
			<description>The attribute to check</description>
		</param>
		<param>
			<name>navigableOnly</name>
			<description>Only navigable attributes are returned. False by default</description>
		</param>
		<return>list of attributes</return>
		<code>
<![CDATA[<#function getAttributes c navigableOnly=false>
	<#local listIds = []/>
	<#list c.attributes as att>
	<#if (!navigableOnly || isNavigable(att))>
		<#local listIds = listIds + [att]/>
	</#if>
	</#list>
	<#return listIds/>
</#function>]]></code>
	</function>
</directive>