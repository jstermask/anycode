<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<head>
		<title>Templating guide</title>
	</head>
	<body>
		<h1>2. Templating Guide</h1>
		<a name="s1"></a>
		<section name="2.1. Template File structure">
			<a name="s11"></a>
			<subsection name="2.1.1. Naming convention">
			<p>A template is a parameterized "document" that will be turned into text file thanks to a template engine.
			</p>
			<p>In anycode, it is actually a set of 2 files that describe both <b>the path (name)</b> of the file to be generated and <b>its content</b>. They must be created
				altogether in the same directory and must comply with the following naming convention:
			</p>
			<table class="table table-bordered">
				<tr>
					<th>Prefix</th>
					<th>Suffix</th>
					<th>Extension</th>
					<th>Description</th>
					<th>Example</th>
				</tr>
				<tr>
					<td>Any valid filename</td>
					<td>-name</td>
					<td>.mda or .mdm</td>
					<td>Template that is responsible for generating source code file's path
					</td>
					<td>foo-name.mda</td>
				</tr>
				<tr>
					<td>Any valid filename</td>
					<td>-content</td>
					<td>.mda or .mdm</td>
					<td>Template that is responsible for generating source code content
					</td>
					<td>foo-content.mda</td>
				</tr>
			</table>
			<p>
				2 files
				<i>foo</i>
				-name.mda and
				<i>foo</i>
				-content.mda compose one template identified as
				<i>foo</i>
				template.
			</p>
			<p class="center">
				<img class="img-polaroid" src="../images/template-structure.png" />
			</p>
			</subsection>
			<a name="s12"></a>
			<subsection name="2.1.2. Scripting Language">
			<p>Before 1.2.0, Anycode used to rely on freemarker language as template engine. Although that language is powerful and reusable thanks to
				directive mechanism, it was not so easy to learn for end users nor to test automatically (unit tests). In order to extend the tool, a decision
				was made to switch from Freemarker to Groovy, as it is closer to the well known JSP syntax, and Directives can be unit tested like any
				Groovy Class.
			</p>
			<p>
				So starting from Anycode 1.2.0, we'll rely only on Groovy templating engine. The latter is used
				<i>as is</i>
				. As a consequence, learning its syntax is a prerequisite to using the plugin.
			</p>
			<p>
				For more information on how to write templates with Groovy, please see
				<a href="http://groovy.codehaus.org/Groovy+Templates" target="_blank">Groovy Templates manual</a>
			</p>
			<p>The example below shows a template that generates a java class. It is made up of 2 files :</p>
			<b>MyTemplate-name.mda</b>
			<source>${targetDir}/${c.getFullyQualifiedName("/")}.java</source>
			<b>MyTemplate-content.mda</b>
			<source>package ${c.owner.getFullyQualifiedName(".")}; 
${java.classifierSignature(c)} { 
	&lt;% def atts = c.attributes %&gt; 
	&lt;% atts.each() {%&gt; 
		${java.attribute(it)} 
	&lt;% } %&gt; 
	&lt;% atts.each() { %&gt; 
		${java.getter(it)} 
		${java.setter(it)} 
	&lt;% } %&gt; 
} </source>
			<p>Several variables are used here : "c", "java"... These will be explained in Template context section.</p>
			</subsection>
			
			<a name="s13"></a>
			<subsection name="2.1.3. Choosing the right scope">
					<p>Needs for code generation can be different from one developer to another. Some will want to generate their classes to a specific language, some
					other will prefer to generate a document for the whole model. They will therefore need to manipulate the model itself or only one of its classifiers.</p>
					<p>Depending on file's extension name, a template can process either a classifier or the whole UML model :</p>
					<ul>
						<li>
							<b>*.mdm</b>
							extension : template will take the UML Model as a parameter. It means that it will be called only once and will generate only one single file.
						</li>
						<li>
							<b>*.mda</b>
							extension : template will take each classifier (class or interface) as a parameter. It means that it will be called as many times as there are
							classifiers in the model.
						</li>
					</ul>
				</subsection>
			</section>
			<a name="s2"></a>
			<section name="2.2. Template context">
				<p> To generate files, template engine always passes a context to templates. It's a set of variables that you can call from the template:
				</p>
				<table class="table table-bordered">
					<tr>
						<th>Parameter name</th>
						<th>Available for scope</th>
						<th>Description</th>
						<th>Type</th>
					</tr>
					<tr>
						<td>m</td>
						<td>Model scope (*.mdm) only</td>
						<td>Anycode model instance. 
						</td>
						<td>
							in.labulle.anycode.uml.IModel (from
							<a href="../api/anycode-uml-api/apidocs/index.html" target="_blank">Anycode UML API</a>
							)
						</td>
					</tr>
					<tr>
						<td>c</td>
						<td>Classifier scope (*.mda) only</td>
						<td>Anycode class instance. This variable will help you generate most of the content of your source code.
						</td>
						<td>
							in.labulle.anycode.uml.IClassifier (from
							<a href="../api/anycode-uml-api/apidocs/index.html" target="_blank">Anycode UML API</a>
							)
						</td>
					</tr>
					<tr>
						<td>targetDir</td>
						<td>any scope</td>
						<td>Target directory that you chose from anycode configuration panel. This will be useful to build the name of the generated file (its path).
						</td>
						<td>java.lang.String</td>
					</tr>
					<tr>
						<td>templateDir</td>
						<td>any scope</td>
						<td>Template directory that you chose from anycode configuration panel. This is where you saved your template(s).
						</td>
						<td>java.lang.String</td>
					</tr>
				</table>
				<p>
					<b>NOTE</b>
					: IClassifier and IModel is an interface provided by
					<a href="../api/anycode-uml-api/apidocs/index.html" target="_blank">Anycode UML API</a>
					whose javadoc is available online
					<a href="../api/anycode-uml-api/apidocs/index.html" target="_blank">here</a>
					. It represents a class designed in Astah and wraps it so that it is even easier to use in templates. From the template, you can therefore access a
					UML Class information, its name, package, attributes, operations, relations, stereotypes... To sum up, you can have access to (almost?) anything
					you designed in your diagram. And the good news is that Anycode API is quite easy to use. For practical examples, please see
					<i>Language reference section</i>
					of this guide and also
					<i>Tutorials section</i>
					.
				</p>
			</section>
			<a name="s3"></a>
			<section name="2.3. Directives">
				<p>Templates use UML model directly, through variables. This makes code generation straightforward. </p>
				<p>However, their size will grow a lot if you don't have a way to reuse some functions. 
					Fortunately you can write custom "directives" in separate files and call their functions directly from your templates. This section will tell you how to do that.
				</p>
				<a name="s31"></a>
				<subsection name="2.3.1. Naming Convention">
				<p>
				A Directive a just a <b>Groovy class</b>, saved in the template directory (directory templates are stored), and whose filename follows a specific naming convention : <b>[myCode]<i>-directive.mda</i></b>.
				This class is detected and processed by anycode, i.e. : an instance of the class is available in your template with "myCode" variable name.
				</p>
				<p>
				Let's take an example : suppose you need to generate a PHP attribute of a class as well as its getters and setters. You can then write all the code in the directive as 
				you can see below.
				</p>
				<code><b>myPhp-directive.mda</b></code>
				<source>
import in.labulle.anycode.uml.*;

class PhpDirective {
	def attribute(IAttribute a) {
		return """private var \$${a.name};"""
	}
	
	def getter(IAttribute a) {
		return """public function get${capitalize(a.name)}() {
			return \$this->${a.name};
		}"""
	}
	
	def setter(IAttribute a) {
		return """pblic function set${capitalize(a.name)}(\$aValue) {
			\$this->${a.name} = \$aValue;
		}"""
	}
	
	def capitalize(String s) {
		return s[0].toUpperCase() + s.substring(1)
	}
}
				</source>
<p>The above class is a Directive. This is a regular Groovy Class that imports Anycode API and that helps generating variable, getter and setter from a UML Attribute. There is no specific constraint regarding the class' name or its methods.
The only important thing to remember is to import the required dependencies (like any groovy class) and make sure that they are in Astah's classpath.
</p>
<p>Now, let's see how to use this directive in our template, thus reducing its code and improving its readability :</p>
				<code><b>yetanothertemplate-name.mda</b></code>
				<source>
${targetDir}/${c.name}.php
				</source> 
				<code><b>yetanothertemplate-content.mda</b></code>
				<source>
&lt;?php
class ${c.name} {
	&lt;&#37; c.attributes.each() { &#37;&gt;
		${myPhp.attribute(it)} 
		${myPhp.getter(it)} 
		${myPhp.setter(it)} 
	&lt;&#37; } &#37;&gt;	
}
?&gt;</source>
				<p>And the result below with a simple Person class with 3 attributes :</p>
				
				<code><b>Person.php</b></code>
<source>
&lt;?php
class Person {
private var $firstname;
public function getFirstname() {
	return $this->firstname;
}
	
public function setFirstname($aFirstname) {
	$this->firstname = $aFirstname;
}

private var $lastname;
public function getLastname() {
	return $this->lastname;
}
	
public function setLastname($aLastname) {
	$this->lastname = $aLastname;
}

private var $birthdate;
public function getBirthdate() {
	return $this->birthdate;
}
	
public function setBirthdate($aBirthdate) {
	$this->birthdate = $aBirthdate;
}
}
?&gt;</source>
				</subsection>
				<a name="s32"></a>			
				<subsection name="2.3.2. Built-in directives">
				<p>anycode provides a few directives out of the box for Java, JPA/Hibernate/Spring-Data, Objective-C (limited support). Please read <a href="../directives/directives.html">Directives API</a>for further details.</p>
				</subsection>
			</section>
	</body>
</document>