<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<head>
		<title>Language reference</title>
	</head>
	<body>
		<h1>Language reference</h1>
		<p>This section will not describe groovy language, as official <a href="http://groovy.codehaus.org/Groovy+Templates" target="_blank">Groovy Templates manual</a> 
		is already here for that. It will give you practical examples to start generating your own source code. 
		It will be regularly updated to give you more and more help. Also, please read <a href="../api/anycode-uml-api/apidocs/index.html" target="_blank">Anycode API</a> 
		in order to know more about methods you can use.
		</p>
		<a name="s21"></a>
		<section name="Class">
<source>
// Display class name
${c.name}

// Class fully qualified name (separated by '.')
${c.getFullyQualifiedName(".")}

// Class package (separated by '.')
${c.owner.getFullyQualifiedName(".")}

// A php class source path (common use case for -name template) in target directory 
${targetDir}/${c.getFullyQualifiedName("/").php}
</source>
		</section>
		<a name="s22"></a>
		<section name="Attributes">
<source>
// Iterating over attributes 
&lt;&#37; c.attributes.each { &#37;&gt;
	// 'it' variable is an IAttribute. This will print attribute name
	${it.name}
&lt;&#37; } &#37;&gt;
</source>			
		</section>
		<a name="s23"></a>
		<section name="Operations">
<source>
// Iterating over operations, that start with 'b' (using closures)
&lt;&#37; c.operations.findAll({it.name.startsWith("b")}).each { &#37;&gt;
	// 'it' variable is an IOperation. This will print operation name
	${it.name}
&lt;&#37; } &#37;&gt;
</source>				
		</section>
		<a name="s24"></a>
		<section name="Relationship">
<p>Simple attributes and relations are both listed in the attributes of the owning class. However you can easily distinguish them thanks to Anycode API</p>
<source>
// Iterating over simple attributes (i.e. : that are not part of a relationship)
&lt;&#37; c.attributes.findAll({!it.relation}).each { &#37;&gt;
	// This will use JavaDirective to render attribute in java language.
	${java.attribute(it)}
&lt;&#37; } &#37;&gt;

// Is my attribute 'att' part of a one to one relationship ?
&lt;&#37; if(att.relation &amp;&amp; att.oneToOne) { &#37;&gt;
	// Let do something here...
&lt;&#37; } &#37;&gt;
</source>		
			</section>
			<a name="s25"></a>
			<section name="Dependencies">
<source>
&lt;&#37; c.clientDependencies.each { &#37;&gt;
	// 'it' is a IClassifier object c depends on.	
&lt;&#37; } &#37;&gt;
</source>
			</section>
			<a name="s26"></a>
			<section name="Inheritance">
<source>
// Displays coma separated list of supertypes 
&lt;&#37; c.generalizations.eachÂ { &#37;&gt;
	${it.name} ${(it != c.generalizations.last()) ? "," : ""} 	
&lt;&#37; } &#37;&gt;
</source>
			</section>
			<a name="s27"></a>
			<section name="Stereotypes">
<source>
&lt;&#37; if(c.hasStereotype("entity")) { &#37;&gt;
	// means that class has stereotype 'entity'
&lt;&#37; } &#37;&gt;
</source>
			</section>
			<a name="s28"></a>
			<section name="User Directive">
				<p>
					As you can imagine, your templates' size will grow a lot if you have to code the above snippets everytime you need them. 
					Fortunately you can write custom "directives" in separate files and use them directly from your templates.
				</p>
				<p>
				A Directive a just a Groovy class, saved in template directory (directory where your templates are saved), and whose name follows a specific convention : [someName]-directive.mda
				</p>
				
				Let's take a very simple example : suppose you need to generate a PHP attribute of a class as well as its getters and setters. You can then write all the code in the macro as 
				you can see in the <i>-content.mda</i> template below :
				</p>
				<code><b>yetanothertemplate-name.mda</b></code>
				<source>
${targetDir}/${c.name}.php
				</source> 
				<code><b>yetanothertemplate-content.mda</b></code>
				<source>
&lt;#macro attribute att&gt;
var ${att.name};
function get${att.name?cap_first}() {
	return ${att.name};
}
	
function set${att.name?cap_first}($a${att.name?cap_first}) {
	$this->${att.name} = $a${att.name?cap_first};
}
&lt;/#macro&gt;
&lt;?php
class ${c.name} {
	&lt;#list c.attributes as att&gt;
	&lt;@attribute att/&gt;
	&lt;/#list&gt;
}
?&gt;	
				</source>
				<p>And the result below with a simple Person class with 3 attributes :</p>
				
				<code><b>Person.php</b></code>
				<source>
&lt;?php
class Person {
var firstname;
function getFirstname() {
	return $this->{att.name};
}
	
function setFirstname($aFirstname) {
	$this->firstname = $aFirstname;
}
var lastname;
function getLastname() {
	return $this->{att.name};
}
	
function setLastname($aLastname) {
	$this->lastname = $aLastname;
}
var birthdate;
function getBirthdate() {
	return $this->{att.name};
}
	
function setBirthdate($aBirthdate) {
	$this->birthdate = $aBirthdate;
}
}
?&gt;
				</source>
				<p>
				Well the source code is now more readable but the macro is still in our template file, and therefore it cannot be reused... Don't worry, let's put it  in a separate file and use the latter
				with a directive !
				</p>
			</section>
			<a name="s29"></a>
			<section name="User Directives">
				<p>
					Another reason why we chose Freemarker for templates is directives. Let's create a directive file, located <b>in the same directory</b> where we put all our previous templates:
				</p>
				<code><b>mymacros.mda</b></code>
				<source>
&lt;#macro attribute att&gt;
var ${att.name};
function get${att.name?cap_first}() {
	return $this->${att.name};
}
	
function set${att.name?cap_first}($a${att.name?cap_first}) {
	$this->${att.name} = $a${att.name?cap_first};
}
&lt;/#macro&gt;			
				</source>
				<p>Now, let's use this macro in our template :</p>
				<code><b>yetanothertemplate-content.mda</b></code>
				<source>
&lt;#import "mymacros.mda" as my/&gt;
&lt;?php
class ${c.name} {
	&lt;#list c.attributes as att&gt;
	&lt;@my.attribute att/&gt;
	&lt;/#list&gt;
}
?&gt;	
				</source>
				<p>Thanks to this process you can define your own directives and make source code generation very easy.</p>
			</section>
	</body>
</document>