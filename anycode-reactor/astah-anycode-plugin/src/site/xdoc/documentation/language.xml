<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<head>
		<title>Language reference</title>
	</head>
	<body>
		<h1>Language reference</h1>
		<p>This section will not describe groovy language, as official <a href="http://groovy.codehaus.org/Groovy+Templates" target="_blank">Groovy Templates manual</a> 
		is already here for that. It will give you practical examples to start generating your own source code. 
		It will be regularly updated to give you more and more help. Also, please read <a href="../api/anycode-uml-api/apidocs/index.html" target="_blank">Anycode UML API</a> 
		in order to know more about methods you can use.
		</p>
		<a name="s21"></a>
		<section name="About Anycode UML API">
		<p>Before 1.2.0_GA version, Anycode used to rely on Astah API and exposed it directly in the templates. Starting from 1.2.0_GA and above, Anycode will always rely on its own <a href="../api/anycode-uml-api/apidocs/index.html" target="_blank">UML API</a>
		The main objectives for wrapping Astah API are to ensure Anycode stability over Astah releases and to make the code generation easier. It is a very recent development and more functions will be added in the next releases.
		The examples below will show how to use it.
		</p>
		</section>
		<a name="s22"></a>
		<section name="Class">
<source>
// Display class name
${c.name}

// Class fully qualified name (separated by '.')
${c.getFullyQualifiedName(".")}

// Class package (separated by '.')
${c.owner.getFullyQualifiedName(".")}

// A php class source path (common use case for -name template) in target directory 
${targetDir}/${c.getFullyQualifiedName("/").php}
</source>
		</section>
		<a name="s23"></a>
		<section name="Attributes">
<source>
// Iterating over attributes 
&lt;&#37; c.attributes.each { &#37;&gt;
	// 'it' variable is an IAttribute. This will print attribute name
	${it.name}
&lt;&#37; } &#37;&gt;
</source>			
		</section>
		<a name="s24"></a>
		<section name="Operations">
<source>
// Iterating over operations, that start with 'b' (using closures)
&lt;&#37; c.operations.findAll({it.name.startsWith("b")}).each { &#37;&gt;
	// 'it' variable is an IOperation. This will print operation name
	${it.name}
&lt;&#37; } &#37;&gt;
</source>				
		</section>
		<a name="s25"></a>
		<section name="Relationship">
<p>Simple attributes and relations are both listed in the attributes of the owning class. However you can easily distinguish them thanks to Anycode API</p>
<source>
// Iterating over simple attributes (i.e. : that are not part of a relationship)
&lt;&#37; c.attributes.findAll({!it.relation}).each { &#37;&gt;
	// This will use JavaDirective to render attribute in java language.
	${java.attribute(it)}
&lt;&#37; } &#37;&gt;

// Is my attribute 'att' part of a one to one relationship ?
&lt;&#37; if(att.relation &amp;&amp; att.oneToOne) { &#37;&gt;
	// Let do something here...
&lt;&#37; } &#37;&gt;</source>		
			</section>
			<a name="s26"></a>
			<section name="Dependencies">
<source>
&lt;&#37; c.clientDependencies.each { &#37;&gt;
	// 'it' is a IClassifier object c depends on.	
&lt;&#37; } &#37;&gt;</source>
			</section>
			<a name="s27"></a>
			<section name="Inheritance">
<source>
// Displays coma separated list of supertypes 
&lt;&#37; c.generalizations.eachÂ { &#37;&gt;
	${it.name} ${(it != c.generalizations.last()) ? "," : ""} 	
&lt;&#37; } &#37;&gt;
</source>
			</section>
			<a name="s28"></a>
			<section name="Stereotypes">
<source>
&lt;&#37; if(c.hasStereotype("entity")) { &#37;&gt;
	// means that class has stereotype 'entity'
&lt;&#37; } &#37;&gt;</source>
			</section>
	</body>
</document>